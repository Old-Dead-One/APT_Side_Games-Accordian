import React, { useState, useEffect } from 'react';
import SideGamesTable from './SideGamesTable';
import AddToCart from './AddToCart';
import { SideGames, EventItem } from './Types';
import { Box, Button } from '@mui/material';

const SelectSideGames: React.FC = () => {
    const [rows, setRows] = useState<SideGames[]>([]);
    const [net, setNet] = useState<string | null>(null);
    const [division, setDivision] = useState<string | null>(null);
    const [superSkins, setSuperSkins] = useState<boolean>(false);
    const [totalCost, setTotalCost] = useState<number>(0);
    const [selectedEvent, setSelectedEvent] = useState<EventItem | null>(null);
    const [tourLabel, setTourLabel] = useState<string | null>(null);
    const [locationLabel, setLocationLabel] = useState<string | null>(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await fetch('/data/sidegames.json');
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();

                const updatedRows = data.map((row: SideGames) => ({
                    ...row,
                    selected: (row.key === net) || (row.key === division) || (row.key === 'SuperSkins' && superSkins)
                }));

                const updatedTotalCost = updatedRows.reduce((acc: number, row: SideGames) => {
                    return acc + (row.selected ? row.value : 0);
                }, 0);

                setRows(updatedRows);
                setTotalCost(updatedTotalCost);
            } catch (error) {
                console.error('Failed to fetch side games data:', error);
            }
        };

        fetchData();
    }, [net, division, superSkins]);

    const handleNetChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const value = event.target.value;
        setNet(value === net ? null : value);
    };

    const handleDivisionChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const value = event.target.value;
        setDivision(value === division ? null : value);
    };

    const handleSuperSkinsChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const checked = event.target.checked;
        setSuperSkins(checked);
    };

    const handleAddToCart = () => {
        console.log('Selected Event:', selectedEvent);
        console.log('Tour Label:', tourLabel);
        console.log('Location Label:', locationLabel);
        console.log('Side Games Rows:', rows.map(row => ({
            name: row.name,
            cost: row.value,
            selected: row.selected
        })));
        console.log('Total Cost:', totalCost);
    };

    return (
        <Box>
            <SideGamesTable
                rows={rows}
                net={net}
                division={division}
                superSkins={superSkins}
                onNetChange={handleNetChange}
                onDivisionChange={handleDivisionChange}
                onSuperSkinsChange={handleSuperSkinsChange}
                totalCost={totalCost}
            />
            <AddToCart
                eventSummary={{
                    selectedEvent,
                    tourLabel,
                    locationLabel
                }}
                sideGamesData={{
                    net,
                    division,
                    superSkins,
                    rows: rows.map(row => ({
                        name: row.name,
                        cost: row.value,
                        selected: row.selected
                    })),
                    totalCost
                }}
            />
            <Button onClick={handleAddToCart}>Add to Cart</Button>
        </Box>
    );
};

export default SelectSideGames;
